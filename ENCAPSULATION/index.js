// DEFINITION

// L'encapsulation en POO est une technique qui consiste √† regrouper des donn√©es (les propri√©t√©s) et des comportements (les m√©thodes) au sein d'un m√™me objet. Cela permet de prot√©ger ces donn√©es en les rendant accessibles uniquement par le biais de ces m√©thodes, et non directement.

// Image :
// Imagine que l'objet est une bo√Æte. √Ä l'int√©rieur de cette bo√Æte, il y a des tr√©sors (les propri√©t√©s) et des outils (les m√©thodes). La bo√Æte a un couvercle avec une serrure. Pour acc√©der aux tr√©sors ou utiliser les outils, il faut passer par une cl√© sp√©ciale (les m√©thodes). Cette cl√© contr√¥le ce que vous pouvez voir ou modifier √† l'int√©rieur de la bo√Æte, emp√™chant ainsi les acc√®s non autoris√©s.

// Exercice : Gestion de comptes bancaires

// Objectif : Illustrer le concept d'encapsulation en limitant l'acc√®s direct aux propri√©t√©s d'une classe.
// Instructions :
// Cr√©ez une classe BankAccount avec des propri√©t√©s priv√©es balance et accountNumber.
// indice: dans le constructor tu vas devoir affilier ces donn√©es priv√©es pour
// pouvoir les utiliser, d√©clare des propri√©t√©s accountNumber & initialBalance
// dans ton constructor ! üòç
// Ajoutez des m√©thodes publiques deposit et withdraw pour modifier le solde.
// Ajoutez une m√©thode getBalance pour afficher le solde.
// Utilisez des symboles (#) pour indiquer les propri√©t√©s priv√©es.

class BankAccount {
	#balance;
	#accountNumber;

	constructor(accountNumber, initialBalance) {
		this.#accountNumber = accountNumber;
		this.#balance = initialBalance;
	}

	deposit(amount) {
		this.#balance += amount;
	}

	withdraw(amount) {
		if (amount <= this.#balance) {
			this.#balance -= amount;
		} else {
			console.log("Insufficient funds");
		}
	}

	getBalance() {
		return this.#balance;
	}
}

const account = new BankAccount("123456789", 1000);
account.deposit(500);
account.withdraw(200);
console.log(account.getBalance()); // 1300
